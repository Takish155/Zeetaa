// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid()) @map("_id")
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                     String          @id @default(cuid()) @map("_id")
  username               String?         @unique
  firstName              String?
  lastName               String?
  birthDate              DateTime?
  email                  String?         @unique
  emailVerified          DateTime?
  hashedPassword         String?
  image                  String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  likedPosts             String[]
  bio                    String?
  accounts               Account[]
  sessions               Session[]
  posts                  PersonPost[]
  sentMessages           Message[]       @relation("MessageSender")
  receivedMessages       Message[]       @relation("MessageReceiver")
  sentFriendRequests     FriendList[]    @relation("SentFriendRequests")
  receivedFriendRequests FriendList[]    @relation("ReceivedFriendRequests")
  outgoingFriendRequests FriendRequest[] @relation("FriendRequestSender")
  incomingFriendRequests FriendRequest[] @relation("FriendRequestReceiver")
}

model VerificationRequest {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model PersonPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  private   Boolean  @default(false)
  likeCount Int      @default(0)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String
  receiverId String
  sentAt     DateTime @default(now())
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
}

model FriendList {
  id        String   @id @default(cuid()) @map("_id")
  user1Id   String
  user2Id   String
  user1     User     @relation("SentFriendRequests", fields: [user1Id], references: [id])
  user2     User     @relation("ReceivedFriendRequests", fields: [user2Id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
}

model FriendRequest {
  id             String   @id @default(cuid()) @map("_id")
  senderId       String
  senderUsername String
  receiverId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sender         User     @relation("FriendRequestSender", fields: [senderId], references: [id])
  receiver       User     @relation("FriendRequestReceiver", fields: [receiverId], references: [id])
}
